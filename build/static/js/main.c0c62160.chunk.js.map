{"version":3,"sources":["components/booklist.jsx","components/entry.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","deleteBookQuery","UpdateBook","BookList","useState","prevName","setPrevName","updatedName","setUpdatedName","updatedId","setUpdatedId","loading","useQuery","useMutation","removeBook","updateBookMut","Auth","pollInterval","console","log","data","disabled","placeholder","type","value","onChange","e","target","onClick","variables","id","name","then","res","catch","err","message","refetch","authors","map","v","i","book","a","b","style","listStyleType","Entry","setName","genre","setGenre","authorId","setAuthorId","ADD_Book","addBook","nam","genr","author","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0c62160.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {gql, useQuery,useMutation,useLazyQuery} from '@apollo/client';\r\n\r\nconst getBooksQuery = gql`\r\n{\r\n    books{\r\n        name\r\n        id\r\n    }\r\n}\r\n`;\r\n\r\nconst getAuthorsQuery = gql`\r\n{\r\n\tauthors{\r\n        name\r\n        id\r\n        book{\r\n            name\r\n            id\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nconst deleteBookQuery = gql`\r\nmutation removeBook($id:String!){\r\n    removeBook(id:$id){\r\n        name\r\n    }\r\n}\r\n`;\r\n\r\nconst UpdateBook = gql`\r\nmutation updateBook($id:String!,$name:String!){\r\n    updateBook(id:$id,name:$name){\r\n        id\r\n    }\r\n}\r\n`;\r\n\r\n\r\nconst BookList = () => {\r\n    const [prevName,setPrevName] = useState('');\r\n    const [updatedName,setUpdatedName] = useState('');\r\n    const [updatedId,setUpdatedId] = useState('');\r\n    const { loading} = useQuery(getBooksQuery);\r\n    const [removeBook] = useMutation(deleteBookQuery);\r\n    const [updateBookMut] = useMutation(UpdateBook);\r\n    // const [lazyQuery,Auth] = useLazyQuery(getAuthorsQuery);\r\n    const Auth = useQuery(getAuthorsQuery,{\r\n        pollInterval:4000\r\n    });\r\n    \r\n    \r\n    const setUpdateFormInputs=(id,name)=>{\r\n        setUpdatedId(id);\r\n        setPrevName(name);\r\n    }\r\n\r\n    const deleteIt=(id)=>{\r\n    removeBook({\r\n        variables:{\r\n            id:id\r\n        }\r\n    })\r\n}\r\n\r\n\r\nconst updateBookName=()=>{\r\n    updateBookMut({\r\n        variables:{\r\n            id:updatedId,\r\n            name:updatedName\r\n        }\r\n    }).then(res=>{\r\n        console.log(res)\r\n    }).catch(err=>{\r\n        console.log(err.message)\r\n    })\r\n}\r\n\r\nconsole.log(Auth.data)\r\n\r\n    return ( \r\n\r\n        <div>\r\n            <h2>Lazy Fetch</h2>\r\n            {/* <button onClick={()=>lazyQuery()}>Lazy Fetch</button> */}\r\n          <div>\r\n              <hr />\r\n              <h2>Update Form</h2>\r\n              <h3>Id</h3>\r\n              <input disabled placeholder=\"select book to edit its name\" type=\"text\" value={updatedId}/>\r\n              <h3>Current Name</h3>\r\n              <input disabled placeholder=\"select book to edit its name\" type=\"text\" value={prevName}/>\r\n              <h3>Name</h3>\r\n              <input type=\"text\" value={updatedName} onChange={e=>setUpdatedName(e.target.value)}/>\r\n              <br />\r\n              <button onClick={()=>updateBookName()}>Final Update</button>\r\n          </div>\r\n          \r\n            <h1>\r\n                BookList\r\n            </h1>\r\n            <button onClick={()=>Auth.refetch()}>Refetch It</button>\r\n            <ul>\r\n            {!Auth.loading &&\r\n\r\n                Auth.data.authors.map((v,i)=>{\r\n                    return(\r\n                        <div key={v.id}>\r\n                            <h3>\r\n                                {v.name}\r\n                            </h3>\r\n                            <h3>\r\n                                {v.id}\r\n                            </h3>\r\n                            <ul>\r\n                            {!loading &&\r\n                                v.book.map((a,b)=>{\r\n                                    return(\r\n                                    <li key={b}\r\n                                    style={{listStyleType:'none'}}\r\n                                    >\r\n                                    <h3>\r\n                                    {a.name}\r\n                                    </h3>\r\n                                <br />\r\n                                <button\r\n                                onClick={()=>deleteIt(a.id)}\r\n                                >Delete It\r\n                                </button>\r\n                                <br />\r\n                                <button\r\n                                onClick={()=>setUpdateFormInputs(a.id,a.name)}\r\n                                >Update It</button>\r\n                                    </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                            </ul>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default BookList;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport {gql,useMutation} from '@apollo/client';\r\nconst Entry = () => {\r\n    const [name,setName]=useState('');\r\n    const [genre,setGenre]=useState('');\r\n    const [authorId,setAuthorId]=useState('');\r\n    \r\n\r\n    const ADD_Book = gql`\r\n  mutation Entry($nam:String!,$genr:String!,$author:ID!){\r\n    addBook(name:$nam,genre:$genr,authorId:$author){\r\n      name\r\n      genre\r\n    }\r\n  }\r\n`;\r\nconst [addBook] = useMutation(ADD_Book);\r\n    \r\n\r\nconst AddItem=()=>{\r\n\r\n    addBook({variables:{\r\n        nam : name,\r\n        genr : genre,\r\n        author:authorId\r\n    }}).then(res=>{\r\n        console.log(res)\r\n    }).catch(err=>{\r\n        console.log(err.message)\r\n    })\r\n\r\n}\r\n\r\n\r\n    return ( \r\n        <div>\r\n            <h4>Name</h4>\r\n            <input type=\"text\" value={name}\r\n            onChange={e=>setName(e.target.value)}\r\n            />\r\n            \r\n            <br />\r\n            <h4>Genre</h4>\r\n            <input type=\"text\" value={genre}\r\n            onChange={e=>setGenre(e.target.value)}\r\n            />\r\n            <br />\r\n            \r\n            <h4>AuthorId</h4>\r\n            <input type=\"text\" value={authorId}\r\n            onChange={e=>setAuthorId(e.target.value)}\r\n            />\r\n            <button\r\n            \r\n            onClick={()=>AddItem()}>Add</button>\r\n        </div>\r\n        );\r\n}\r\n \r\nexport default Entry;","import './App.css';\nimport BookList from \"./components/booklist.jsx\";\nimport Entry from './components/entry.jsx';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache\n} from \"@apollo/client\";\n\nconst  client = new ApolloClient({\n  uri:\"http://localhost:3001/graphql\",\n  cache: new InMemoryCache()\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <div className=\"App\">\n      <Entry/>\n      <BookList/>\n    </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}